{"version":3,"sources":["app/components/NavBar.js","app/components/SelfDestruct.js","app/components/Help.js","urls.js","client.js","features/poems/poemSlice.js","features/poems/PoemAuthor.js","features/poems/TimeAgo.js","features/poems/poemList.js","features/words/wordSlice.js","app/components/CurrentWord.js","features/poems/TimeNow.js","features/poems/ReactionButtons.js","features/poems/poem.js","app/components/MiniPoem.js","app/components/FeaturedWorldPoem.js","app/components/Game.js","features/users/userSlice.js","app/store.js","index.js","relax.gif"],"names":["NavBar","buttons","name","text","url","Box","sx","flexGrow","AppBar","position","className","style","backgroundColor","Toolbar","IconButton","size","edge","color","aria-label","mr","map","item","i","Button","href","SelfDestruct","src","relax","alt","Help","url_base","require","client","endpoint","a","body","customConfig","resolve","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","addPoem","createAsyncThunk","initialPoem","fetchPoems","activeUser","length","activePoem","user","title","lines","lineCount","valid","syllableCounts","syllableLimits","date","reactions","archived","userId","fetchActivePoem","linesEdit","fetchPoemById","poemId","poems","find","poem","id","poemSlice","createSlice","initialState","listStatus","listError","activePoemStatus","activePoemError","reducers","poemAdded","reducer","state","action","push","payload","prepare","placeholders","1","2","3","4","5","nanoid","Date","toISOString","poemUpdated","existingPoem","poemReset","reactionAdded","reaction","extraReducers","pending","fulfilled","concat","rejected","error","removeIndex","indexOf","splice","actions","selectAllPoems","PoemAuthor","author","useSelector","users","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","PoemList","content","dispatch","useDispatch","poemStatus","useEffect","filter","key","line","index","to","currentWord","word","definition","syllables","words","status","fetchWord","wordSlice","currentWordUpdated","wordAdded","original","updated","wordUpdated","existingWord","CurrentWord","loadingStatus","syllableCount","Card","variant","width","CardContent","Fragment","TextField","value","multiline","maxRows","TimeNow","formattedTime","format","reactionEmoji","ReactionButtons","reactionButtons","Object","entries","buttonContent","type","onClick","Poem","match","useHistory","useState","setTitle","setLines","activeUserId","wordMap","addRequestStatus","setAddRequestStatus","fetchActive","params","then","onSaveAndCreatePoemClicked","every","Boolean","resultAction","unwrapResult","console","log","onSavePoemClicked","onChangeCurrentWord","newWord","split","reduce","runningTotal","onChange","e","target","lineNum","newLine","newLines","cursorStart","selectionStart","cursorEnd","selectionEnd","slice","setSelectionRange","handleLineChange","getSelection","modify","sel","isCollapsed","toString","handlePoemClick","placeholder","MiniPoem","props","mapping","handleClick","FeaturedWorldPoem","Game","exact","path","render","component","usersSlice","configureStore","poemReducer","userReducer","wordReducer","ReactDOM","StrictMode","store","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4deb4070.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nconst NavBar = () => {\n    const userName = '🌎';\n    const buttons = [\n        { name: 'bldr', text: 'bldr', url: '' },\n        { name: 'help', text: 'Help', url: '/help' },\n        { name: 'selfDestruct', text: 'Self Destruct', url: '/relax' },\n        { name: 'myPoems', text: 'My Poems', url: '/history' },\n        { name: 'user', text: `by ${userName}`, url: '/user' },\n    ];\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar\n                position='fixed'\n                className='nav'\n                style={{ backgroundColor: '#34060D' }}\n            >\n                <Toolbar>\n                    <IconButton\n                        size='large'\n                        edge='start'\n                        color='inherit'\n                        aria-label='menu'\n                        sx={{ mr: 2 }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    {buttons.map((item, i) => (\n                        <Button href={item.url} style={{ color: 'white' }}>\n                            {item.text}\n                        </Button>\n                    ))}\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport relax from '../../relax.gif';\n\nconst SelfDestruct = () => {\n    return (\n        <div className='relax'>\n            <img src={relax} alt='Just a second... :)' />\n        </div>\n    );\n};\n\nexport default SelfDestruct;\n","import React from 'react';\n\nconst Help = () => {\n    return (\n        <div className='help'>\n            <h3>Sometimes you have to 🍳...</h3>\n        </div>\n    );\n};\n\nexport default Help;\n","const production = 'https://poem-builder.herokuapp.com';\nconst development = 'http://localhost:5000';\nexport const url_base =\n    process.env.REACT_APP_ENVIRONMENT === 'development'\n        ? development\n        : production;\n","import { url_base } from './urls';\nconst url = require('url');\n\n// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n    endpoint = url.resolve(url_base, endpoint);\n\n    const headers = { 'Content-Type': 'application/json' };\n\n    const config = {\n        method: body ? 'POST' : 'GET',\n        ...customConfig,\n        headers: {\n            ...headers,\n            ...customConfig.headers,\n        },\n    };\n\n    if (body) {\n        config.body = JSON.stringify(body);\n    }\n\n    let data;\n    try {\n        const response = await window.fetch(endpoint, config);\n        data = await response.json();\n        if (response.ok) {\n            return data;\n        }\n        throw new Error(response.statusText);\n    } catch (err) {\n        return Promise.reject(err.message ? err.message : data);\n    }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n    return client(endpoint, { ...customConfig, method: 'GET' });\n};\n\nclient.post = function (endpoint, body, customConfig = {}) {\n    return client(endpoint, { ...customConfig, body });\n};\n","import { createSlice, createAsyncThunk, nanoid } from '@reduxjs/toolkit';\nimport { client } from '../../client';\n\nconst initialState = {\n    activePoem: null,\n    poems: [],\n    listStatus: 'idle',\n    listError: null,\n    activePoemStatus: 'idle',\n    activePoemError: null,\n};\n\nexport const addPoem = createAsyncThunk(\n    'poems/addPoem',\n    async (initialPoem) => {\n        const response = await client.post(`/wordAPI/poem/`, initialPoem);\n        return response;\n    }\n);\n\nexport const fetchPoems = createAsyncThunk('poems/fetchPoems', async () => {\n    let activeUser;\n    if (!activeUser) {\n        activeUser = 'a';\n    }\n\n    const response = await client.get(`wordAPI/poem/${activeUser}`);\n    if (response.length) {\n        return response;\n    } else {\n        return [\n            {\n                activePoem: {\n                    user: activeUser,\n                    title: 'Title here...',\n                    lines: [\n                        'haikues are easy',\n                        \"but sometimes they don't make sense\",\n                        'refrigerator',\n                    ],\n                    lineCount: 3,\n                    valid: true,\n                    syllableCounts: [5, 7, 5],\n                    syllableLimits: [5, 7, 5],\n                    date: '10/10/2022',\n                    reactions: [0, 0, 0, 0, 0],\n                    archived: false,\n                },\n                userId: activeUser,\n            },\n        ];\n    }\n});\n\nexport const fetchActivePoem = createAsyncThunk(\n    'poems/fetchActivePoem',\n    async () => {\n        let activeUser;\n        if (!activeUser) {\n            activeUser = 'a';\n        }\n\n        const response = await client.get(`wordAPI/poem/${activeUser}`);\n        if (response.length) {\n            return response[0];\n        } else {\n            return {\n                user: activeUser,\n                title: 'Title here...',\n                lines: [\n                    'haikus are easy',\n                    \"but sometimes they don't make sense\",\n                    'refrigerator',\n                ],\n                linesEdit: [\n                    'haikus are easy',\n                    \"but sometimes they don't make sense\",\n                    'refrigerator',\n                ],\n                lineCount: 3,\n                valid: true,\n                syllableCounts: [5, 7, 5],\n                syllableLimits: [5, 7, 5],\n                date: null,\n                reactions: [0, 0, 0, 0, 0],\n                archived: false,\n            };\n        }\n    }\n);\n\nexport const fetchPoemById = createAsyncThunk(\n    'poems/fetchPoemById',\n    async (poemId) => {\n        let activeUser;\n        if (!activeUser) {\n            activeUser = 'a';\n        }\n\n        const poems = await client.get(`wordAPI/poem/${activeUser}`);\n        if (poems.length) {\n            return poems.find((poem) => poem.id === poemId);\n        } else {\n            return null;\n        }\n    }\n);\n\nconst poemSlice = createSlice({\n    name: 'poems',\n    initialState,\n    reducers: {\n        poemAdded: {\n            reducer(state, action) {\n                state.poems.push(action.payload);\n            },\n            prepare(userId = null, lines = null, title = null) {\n                const syllableLimits = [5, 7, 5];\n                const syllableCounts = [0, 0, 0];\n                const placeholders = [\n                    'haikus are easy',\n                    \"but sometimes they don't make sense\",\n                    'refrigerator',\n                ];\n                const reactions = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n                const valid = false;\n                const id = nanoid();\n                if (!userId) {\n                    userId = '';\n                }\n                if (!lines) {\n                    lines = ['', '', ''];\n                }\n                if (!title) {\n                    title = `Poem ${id}`;\n                }\n                return {\n                    payload: {\n                        id: id,\n                        date: new Date().toISOString(),\n                        user: userId,\n                        title,\n                        lines,\n                        valid,\n                        syllableLimits,\n                        syllableCounts,\n                        placeholders,\n                        reactions,\n                    },\n                };\n            },\n        },\n        poemUpdated(state, action) {\n            const { id, title, lines } = action.payload;\n            const existingPoem = state.poems.find((poem) => poem.id === id);\n            if (existingPoem) {\n                existingPoem.title = title;\n                existingPoem.lines = lines;\n            }\n            addPoem(existingPoem);\n        },\n        poemReset(state, action) {\n            const id = action.payload;\n            const existingPoem = state.poems.find((poem) => poem.id === id);\n            if (existingPoem) {\n                existingPoem.syllableCounts = [0, 0, 0];\n                existingPoem.lines = ['', '', ''];\n                existingPoem.valid = false;\n            }\n        },\n        reactionAdded(state, action) {\n            const { poemId, reaction } = action.payload;\n            const existingPoem = state.poems.find((poem) => poem.id === poemId);\n            if (existingPoem) {\n                existingPoem.reactions[reaction]++;\n            }\n        },\n    },\n    extraReducers: {\n        [fetchPoems.pending]: (state, action) => {\n            state.listStatus = 'loading';\n        },\n        [fetchPoems.fulfilled]: (state, action) => {\n            state.listStatus = 'succeeded';\n            state.poems = state.poems.concat(action.payload);\n        },\n        [fetchPoems.rejected]: (state, action) => {\n            state.listStatus = 'failed';\n            state.listError = action.error.message;\n        },\n        [addPoem.fulfilled]: (state, action) => {\n            var removeIndex = state.poems\n                .map((item) => item.id)\n                .indexOf(action.payload.id);\n            ~removeIndex && state.poems.splice(removeIndex, 1);\n            state.poems.push(action.payload);\n            state.activePoem = action.payload;\n        },\n        [fetchActivePoem.fulfilled]: (state, action) => {\n            if (!action.payload) {\n                addPoem(action.payload);\n            } else {\n                state.activePoem = action.payload;\n                state.activePoemStatus = 'succeeded';\n            }\n        },\n        [fetchPoemById.fulfilled]: (state, action) => {\n            state.activePoem = action.payload;\n            state.activePoemStatus = 'succeeded';\n        },\n    },\n});\n\nexport const { poemAdded, poemUpdated, poemReset, reactionAdded } =\n    poemSlice.actions;\n\nexport default poemSlice.reducer;\n\nexport const selectAllPoems = (state) => state.poems.poems;\n\nexport const selectPoemById = (state, poemId) => {\n    return state.poems.poems.find((poem) => poem.id === poemId);\n};\n\nexport const selectActivePoem = (state) => {\n    return state.poems.activePoem;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const PoemAuthor = ({ userId }) => {\n    const author = useSelector((state) =>\n        state.users.users.find((user) => user.id === userId)\n    );\n\n    return <span>by {author ? author.name : 'Unknown author'}</span>;\n};\n","import React from 'react';\nimport { parseISO, formatDistanceToNow } from 'date-fns';\n\nexport const TimeAgo = ({ timestamp }) => {\n    let timeAgo = '';\n    if (timestamp) {\n        const date = parseISO(timestamp);\n        const timePeriod = formatDistanceToNow(date);\n        timeAgo = `${timePeriod} ago`;\n    }\n\n    return (\n        <span title={timestamp}>\n            &nbsp; <i>{timeAgo}</i>\n        </span>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { selectAllPoems, fetchPoems } from './poemSlice';\nimport { PoemAuthor } from './PoemAuthor';\nimport { TimeAgo } from './TimeAgo';\n\nexport const PoemList = () => {\n    const dispatch = useDispatch();\n    const poems = useSelector(selectAllPoems);\n    const poemStatus = useSelector((state) => state.poems.listStatus);\n    const error = useSelector((state) => state.poems.error);\n\n    useEffect(() => {\n        if (poemStatus === 'idle') {\n            dispatch(fetchPoems());\n        }\n    }, [poemStatus, dispatch]);\n\n    let content;\n\n    if (poemStatus === 'loading') {\n        content = <div className='loader'>Loading</div>;\n    } else if (poemStatus === 'succeeded') {\n        content = poems\n            .filter((poem) => !poem.archived)\n            .map((poem) => (\n                <article key={poem.id}>\n                    <h3>{poem.title}</h3>\n                    <PoemAuthor userId={poem.user} />\n                    <TimeAgo timestamp={poem.date} />\n                    {poem.lines.map((line, index) => (\n                        <p key={`${poem.id}_${index}`}>{line}</p>\n                    ))}\n                    <Link to={`/poems/${poem.id}`}>View Poem</Link>\n                </article>\n            ));\n    } else if (poemStatus === 'failed') {\n        content = <div>{error}</div>;\n    }\n\n    return (\n        <section>\n            <h2>My Poems</h2>\n            {content}\n        </section>\n    );\n};\n","import { createSlice, createAsyncThunk, nanoid } from '@reduxjs/toolkit';\nimport { client } from '../../client';\n\nconst initialMap = {};\nconst initialState = {\n    currentWord: {\n        word: 'poem',\n        definition: null,\n        syllables: null,\n    },\n    words: initialMap,\n    status: 'idle',\n    error: null,\n};\n\nexport const fetchWord = createAsyncThunk(\n    'currentWord/fetchWord',\n    async (word) => await client.get(`wordAPI/${word}`)\n);\n\nexport const fetchWordMap = createAsyncThunk(\n    'currentWord/fetchWordMap',\n    async (userId) => await client.get(`map/${userId}`)\n);\n\nconst wordSlice = createSlice({\n    name: 'words',\n    initialState,\n    reducers: {\n        currentWordUpdated(state, action) {\n            state.currentWord.word = action.payload;\n            state.currentWord.syllables = 0;\n            state.currentWord.definition = '';\n            state.status = 'idle';\n            fetchWord(action.payload);\n        },\n        wordAdded: {\n            reducer(state, action) {\n                state.words[action.payload.word] = action.payload;\n            },\n            prepare(word) {\n                return {\n                    payload: {\n                        word,\n                        original: word,\n                        updated: false,\n                    },\n                };\n            },\n        },\n        wordUpdated(state, action) {\n            const { word, definition, syllables } = action.payload;\n            const existingWord = state.words[word];\n            if (existingWord) {\n                existingWord.definition = definition;\n                existingWord.syllables = syllables;\n                existingWord.updated = true;\n            }\n            state.words[word] = existingWord;\n        },\n    },\n    extraReducers: {\n        [fetchWord.pending]: (state, action) => {\n            state.status = 'loading';\n        },\n        [fetchWord.fulfilled]: (state, action) => {\n            state.status = 'succeeded';\n            state.currentWord.word = state.currentWord.word;\n            state.currentWord.syllables = action.payload.syllables;\n            state.currentWord.definition = action.payload.definition;\n            state.words[state.currentWord.word] = state.currentWord;\n        },\n        [fetchWord.rejected]: (state, action) => {\n            state.status = 'failed';\n            state.error = action.error.message;\n        },\n    },\n});\n\nexport const { currentWordUpdated, wordAdded, wordUpdated } = wordSlice.actions;\n\nexport default wordSlice.reducer;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchWord } from '../../features/words/wordSlice';\nimport { Button, TextField, Card, CardContent } from '@mui/material';\n\nexport const CurrentWord = () => {\n    const displaySyllableUpdate = false,\n        displayDefinitionUpdate = false,\n        displayWordResetButton = false;\n\n    const dispatch = useDispatch();\n\n    const currentWord = useSelector((state) => state.words.currentWord);\n    const loadingStatus = useSelector((state) => state.words.status);\n    const error = useSelector((state) => state.words.error);\n\n    if (loadingStatus === 'idle') {\n        if (currentWord['word']) {\n            dispatch(fetchWord(currentWord['word']));\n        }\n    }\n    const syllableCount = currentWord ? currentWord.syllables : 0;\n\n    return (\n        <Card\n            variant='outlined'\n            style={{ backgroundColor: '#204B5C', width: '600px' }}\n        >\n            <CardContent>\n                <div className='currentWord'>\n                    <h1 className='currentWordDisplay'>\n                        {currentWord ? currentWord['word'] : ''}\n                    </h1>\n\n                    <span className='currentWordSyllables'>\n                        {loadingStatus === 'loading' ? (\n                            <div className='loader'>Loading</div>\n                        ) : (\n                            <React.Fragment>\n                                <TextField\n                                    className='currentWordSyllableCount'\n                                    value={syllableCount}\n                                />\n\n                                <span className='currentWordSyllableText'>\n                                    {` syllable${\n                                        syllableCount > 1 || syllableCount === 0\n                                            ? 's'\n                                            : ''\n                                    }`}\n                                </span>\n                            </React.Fragment>\n                        )}\n                        {loadingStatus === 'failed' ? <div>{error}</div> : null}\n                    </span>\n\n                    {displaySyllableUpdate ? (\n                        <React.Fragment>\n                            <Button value='Update syllable count' />\n                            <Button value='Cancel' />\n                        </React.Fragment>\n                    ) : null}\n\n                    {loadingStatus === 'loading' ? (\n                        <div className='loader'>Loading</div>\n                    ) : (\n                        <TextField\n                            multiline\n                            maxRows='4'\n                            className='currentDefinition'\n                            value={currentWord ? currentWord.definition : ''}\n                        />\n                    )}\n\n                    {displayDefinitionUpdate ? (\n                        <React.Fragment>\n                            <Button value='Update definition' />\n                            <Button value='Cancel' />\n                        </React.Fragment>\n                    ) : null}\n\n                    {displayWordResetButton ? (\n                        <Button value={`Reset syllable count & definition`} />\n                    ) : null}\n                </div>\n            </CardContent>\n        </Card>\n    );\n};\n","import React from 'react';\nimport { parseISO, format } from 'date-fns';\n\nexport const TimeNow = ({ timestamp }) => {\n    let date;\n    let formattedTime = '';\n    if (timestamp) {\n        date = parseISO(timestamp);\n        formattedTime = format(date, 'MM/dd/yyyy hh:mm aaaa');\n    }\n\n    return (\n        <span title={timestamp}>\n            &nbsp; <i>{formattedTime}</i>\n        </span>\n    );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { reactionAdded } from './poemSlice';\nimport Button from '@mui/material/Button';\n\nconst reactionEmoji = {\n    1: '🥶',\n    2: '😨',\n    3: '😰',\n    4: '😱',\n    5: '🤯',\n};\n\nexport const ReactionButtons = ({ poem }) => {\n    const dispatch = useDispatch();\n\n    if (!poem || !poem.reactions) {\n        return null;\n    }\n\n    const reactionButtons = Object.entries(reactionEmoji).map(\n        ([name, emoji]) => {\n            const buttonContent = [emoji, <br />, poem.reactions[name]];\n            return (\n                <Button\n                    key={name}\n                    type='button'\n                    className='muted-button reaction-button'\n                    onClick={() =>\n                        dispatch(\n                            reactionAdded({ poemId: poem.id, reaction: name })\n                        )\n                    }\n                >\n                    {buttonContent}\n                </Button>\n            );\n        }\n    );\n\n    return <div className='reactionButtons'>{reactionButtons}</div>;\n};\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { currentWordUpdated, fetchWord } from '../words/wordSlice';\nimport {\n    poemAdded,\n    poemReset,\n    addPoem,\n    fetchActivePoem,\n    fetchPoemById,\n} from './poemSlice';\nimport { CurrentWord } from '../../app/components/CurrentWord';\nimport { PoemAuthor } from './PoemAuthor';\nimport { TimeNow } from './TimeNow';\nimport { ReactionButtons } from './ReactionButtons';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { Box, Button, Card, CardContent, TextField } from '@mui/material';\n\nexport const Poem = ({ match = null }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    let poem = useSelector((state) => state.poems.activePoem);\n    if (!poem) {\n        poem = {\n            user: 'a',\n            title: 'Title here...',\n            lines: [\n                'haikues are easy',\n                \"but sometimes they don't make sense\",\n                'refrigerator',\n            ],\n            lineCount: 3,\n            valid: true,\n            syllableCounts: [5, 7, 5],\n            syllableLimits: [5, 7, 5],\n            date: '10/10/2022',\n            reactions: [0, 0, 0, 0, 0],\n            archived: false,\n        };\n    }\n\n    const poems = useSelector((state) => state.poems.poems);\n    const poemStatus = useSelector((state) => state.poems.activePoemStatus);\n    const error = useSelector((state) => state.poems.error);\n    const [title, setTitle] = useState(poem ? poem.title : '');\n    const [lines, setLines] = useState(poem ? poem.lines : ['', '', '']);\n    const onTitleChanged = (e) => setTitle(e.target.value);\n    let syllableLimits =\n        poem && poem.syllableLimits ? poem.syllableLimits : [5, 7, 5];\n    let syllableCounts =\n        poem && poem.syllableCounts ? poem.syllableCounts : [0, 0, 0];\n    let placeholders =\n        poem && poem.placeholders\n            ? poem.placeholders\n            : [\n                  'haikus are easy',\n                  \"but sometimes they don't make sense\",\n                  'refrigerator',\n              ];\n    let id = poem && poem.id ? poem.id : id;\n    let reactions =\n        poem && poem.reactions\n            ? poem.reactions\n            : { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n    let date = poem && poem.date ? poem.date : '';\n    const userId = useSelector((state) => state.users.activeUserId);\n\n    let canSave = false;\n\n    const wordMap = useSelector((state) => state.words.words);\n    const [addRequestStatus, setAddRequestStatus] = useState('idle');\n\n    let fetchActive = false;\n    let poemId;\n    if (match) {\n        poemId = match.params.poemId;\n    } else {\n        fetchActive = true;\n        poemId = null;\n    }\n\n    useEffect(() => {\n        if (poemStatus === 'idle' && fetchActive) {\n            dispatch(fetchActivePoem()).then((poem) => {\n                setLines(poem.payload.lines);\n                setTitle(poem.payload.title);\n            });\n        } else if (poemStatus === 'idle') {\n            dispatch(fetchPoemById(poemId)).then((poem) => {\n                setLines(poem.payload.lines);\n                setTitle(poem.payload.title);\n            });\n        }\n    });\n\n    let content;\n\n    const onSaveAndCreatePoemClicked = async () => {\n        canSave =\n            [\n                id,\n                title,\n                lines,\n                userId,\n                syllableLimits,\n                syllableCounts,\n                reactions,\n                placeholders,\n            ].every(Boolean) && addRequestStatus === 'idle';\n\n        if (canSave) {\n            try {\n                setAddRequestStatus('pending');\n                const resultAction = await dispatch(\n                    addPoem({\n                        id,\n                        title,\n                        lines,\n                        user: userId,\n                        syllableCounts,\n                        syllableLimits,\n                        date,\n                        reactions,\n                    })\n                );\n                unwrapResult(resultAction);\n                setTitle('');\n                setLines(['', '', '']);\n            } catch (err) {\n                console.error('Failed to save the post: ', err);\n            } finally {\n                setAddRequestStatus('idle');\n            }\n        } else {\n            console.log(`cannot save`);\n        }\n\n        dispatch(poemAdded(userId));\n    };\n\n    const onSavePoemClicked = async () => {\n        canSave =\n            [\n                id,\n                title,\n                lines,\n                userId,\n                syllableLimits,\n                syllableCounts,\n                reactions,\n                placeholders,\n            ].every(Boolean) && addRequestStatus === 'idle';\n\n        if (canSave) {\n            try {\n                setAddRequestStatus('pending');\n                const resultAction = await dispatch(\n                    addPoem({\n                        id,\n                        title,\n                        lines,\n                        user: userId,\n                        syllableCounts,\n                        syllableLimits,\n                        date,\n                        reactions,\n                    })\n                );\n                unwrapResult(resultAction);\n            } catch (err) {\n                console.error('Failed to save the post: ', err);\n            } finally {\n                setAddRequestStatus('idle');\n            }\n        } else {\n            console.log(`cannot save`);\n        }\n    };\n\n    const onResetPoemClicked = () => {\n        dispatch(poemReset(poemId));\n    };\n\n    const onChangeCurrentWord = (newWord) => {\n        dispatch(currentWordUpdated(newWord));\n    };\n\n    const handleLineChange = (e, lineNum) => {\n        const newLine = e.target.value;\n        let newLines = [...lines];\n        newLines[lineNum] = newLine;\n        setLines(newLines);\n\n        // save original cursor position\n        var cursorStart = e.target.selectionStart,\n            cursorEnd = e.target.selectionEnd;\n\n        let line = e.target.value;\n\n        // line from start up to current cursor position\n        var leftOfCursor = e.target.value.slice(0, e.target.selectionEnd);\n        var words = leftOfCursor.split(' ');\n        var currentWord = words[words.length - 1];\n\n        onChangeCurrentWord(currentWord); // this is completing execution AFTER history has already been calculated\n\n        // restore cursor position\n        e.target.setSelectionRange(cursorStart, cursorEnd);\n    };\n\n    const handlePoemClick = (e, lineNum) => {\n        // https://stackoverflow.com/questions/7563169/detect-which-word-has-been-clicked-on-within-a-text\n        var word = '';\n        let selection = window.getSelection().modify;\n        if (selection && window.getSelection) {\n            // save original cursor position\n            // http://dimafeldman.com/js/maintain-cursor-position-after-changing-an-input-value-programatically/\n            var cursorStart = e.target.selectionStart,\n                cursorEnd = e.target.selectionEnd;\n\n            var sel = window.getSelection();\n            if (sel.isCollapsed) {\n                sel.modify('move', 'forward', 'character');\n                sel.modify('move', 'backward', 'word');\n                sel.modify('extend', 'forward', 'word');\n                word = sel.toString();\n                sel.modify('move', 'forward', 'character'); // clear selection\n            } else {\n                word = sel.toString();\n            }\n\n            // restore cursor position\n            e.target.setSelectionRange(cursorStart, cursorEnd);\n        }\n\n        onChangeCurrentWord(word);\n    };\n\n    if (poemStatus === 'loading') {\n        content = <div className='loader'>Loading</div>;\n    } else if (poemStatus === 'succeeded') {\n        syllableLimits =\n            poem && poem.syllableLimits ? poem.syllableLimits : syllableLimits;\n        placeholders =\n            poem && poem.placeholders ? poem.placeholders : placeholders;\n        id = poem && poem.id ? poem.id : id;\n        reactions = poem && poem.reactions ? poem.reactions : reactions;\n        date = poem && poem.date ? poem.date : date;\n\n        // calculating the syllable counts\n        syllableCounts =\n            poem && poem.syllableCounts ? poem.syllableCounts : syllableCounts;\n        if (!syllableCounts.length) {\n            syllableCounts = lines.map((line) => {\n                if (!line) {\n                    return 0;\n                }\n                const words = line.split(' ');\n                const total = words.reduce((runningTotal, currentWord) => {\n                    return (runningTotal += wordMap[currentWord]\n                        ? wordMap[currentWord]['syllables']\n                        : 0);\n                }, 0);\n                return total;\n            });\n        }\n\n        content = (\n            <React.Fragment>\n                <Card\n                    style={{ backgroundColor: '#3C6271', width: '600px' }}\n                    variant='outlined'\n                >\n                    <CardContent>\n                        <div className='poem'>\n                            <div className='row'>\n                                <div className='title'>\n                                    <span>\n                                        <span className={'underline'}>\n                                            title\n                                        </span>\n                                        :\n                                    </span>\n                                    <TextField\n                                        className='title'\n                                        value={title}\n                                        onChange={(e) =>\n                                            setTitle(e.target.value)\n                                        }\n                                    />\n                                </div>\n\n                                <h2 title={title} onChange={onTitleChanged} />\n                                <Button onClick={onSavePoemClicked}>\n                                    Save\n                                </Button>\n                                <Button onClick={onSaveAndCreatePoemClicked}>\n                                    Save & Create New\n                                </Button>\n                                <Button onClick={onResetPoemClicked}>\n                                    Reset\n                                </Button>\n                            </div>\n                            <PoemAuthor userId={poem ? poem.user : null} />\n                            <TimeNow timestamp={poem ? poem.date : ''} />\n                            <ReactionButtons poem={poem} />\n                            <div className='lines'>\n                                {lines\n                                    ? lines.map((line, lineNum) => (\n                                          <span\n                                              key={`line_${lineNum}`}\n                                              className='line'\n                                          >\n                                              <TextField\n                                                  key={lineNum}\n                                                  value={line}\n                                                  onChange={(e) =>\n                                                      handleLineChange(\n                                                          e,\n                                                          lineNum\n                                                      )\n                                                  }\n                                                  onClick={(e) =>\n                                                      handlePoemClick(\n                                                          e,\n                                                          lineNum\n                                                      )\n                                                  }\n                                                  placeholder={\n                                                      placeholders\n                                                          ? placeholders[\n                                                                lineNum\n                                                            ]\n                                                          : ''\n                                                  }\n                                              />\n                                              <h4\n                                                  key={`counter_${lineNum}`}\n                                                  className='counter'\n                                              >\n                                                  {' '}\n                                                  {\n                                                      syllableCounts[lineNum]\n                                                  } / {syllableLimits[lineNum]}\n                                              </h4>\n                                          </span>\n                                      ))\n                                    : null}\n                                <hr className='divider' />\n                            </div>\n                        </div>\n                    </CardContent>\n                </Card>\n                <CurrentWord />\n            </React.Fragment>\n        );\n    } else if (poemStatus === 'failed') {\n        content = <div>{error}</div>;\n    }\n\n    return <React.Fragment>{content}</React.Fragment>;\n};\n","import React from 'react';\n\nconst MiniPoem = (props) => {\n    const mapping = props.lines\n        ? props.lines.length\n            ? props.lines.map((line, index) => {\n                  return (\n                      <span key={index}>\n                          <span>{line}</span>\n                          <br />\n                      </span>\n                  );\n              })\n            : null\n        : null;\n\n    return props.lines && props.lines.length > 0 ? (\n        <span onClick={props.handleClick}>{mapping}</span>\n    ) : null;\n};\n\nexport default MiniPoem;\n","import React from 'react';\nimport MiniPoem from './MiniPoem';\n\nexport const FeaturedWorldPoem = (props) => {\n    const lines = null;\n\n    return <MiniPoem lines={lines} />;\n};\n","import React from 'react';\nimport NavBar from './NavBar';\nimport SelfDestruct from './SelfDestruct';\nimport Help from './Help';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from 'react-router-dom';\nimport { PoemList } from '../../features/poems/poemList';\nimport { Poem } from '../../features/poems/poem';\nimport { FeaturedWorldPoem } from './FeaturedWorldPoem';\n\nconst user_id = 'a';\n\nfunction Game() {\n    return (\n        <Router>\n            <NavBar />\n\n            <div className='App'>\n                <Switch>\n                    <Route\n                        exact\n                        path='/'\n                        render={() => (\n                            <React.Fragment>\n                                <Poem />\n                            </React.Fragment>\n                        )}\n                    />\n                    <Route\n                        exact\n                        path='/history'\n                        render={() => (\n                            <React.Fragment>\n                                <PoemList />\n                            </React.Fragment>\n                        )}\n                    />\n                    <Route exact path='/relax' component={SelfDestruct} />\n                    <Route exact='/help' path='/help' component={Help} />\n                    <Route\n                        exact\n                        path='/user'\n                        render={() => (\n                            <React.Fragment>\n                                <FeaturedWorldPoem />\n                            </React.Fragment>\n                        )}\n                    />\n                    <Route exact path='/poems/:poemId' component={Poem} />\n                    <Redirect to='/' />\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default Game;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    users: [\n        { id: 'a', name: '🌎' },\n        { id: 'b', name: 'JT' },\n        { id: 'c', name: 'DC' },\n    ],\n    activeUserId: 'a',\n};\n\nconst usersSlice = createSlice({\n    name: 'users',\n    initialState,\n    reducers: {},\n});\n\nexport default usersSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport poemReducer from '../features/poems/poemSlice';\nimport wordReducer from '../features/words/wordSlice';\nimport userReducer from '../features/users/userSlice';\n\nexport default configureStore({\n    reducer: {\n        poems: poemReducer,\n        users: userReducer,\n        words: wordReducer,\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport Game from './app/components/Game';\nimport store from './app/store';\n\n// ========================================\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Game />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/relax.8074cc44.gif\";"],"sourceRoot":""}